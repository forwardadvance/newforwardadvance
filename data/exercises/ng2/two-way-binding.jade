//- -# TODO written while drunk. Please fix

section

  :markdown
    In a previous sections we looked at input and output with our Angular 2 components

    * Input: via attributes and properties
    * Output: via events which we can listen to

    This means we can now interact with forms.

    An &lt;input /> DOM node will emit many different events when our user interacts with it, including:

    * keyup - when the user presses a key
    * focus - When the user enters the field
    * blur - When the user leaves the field
    * input - When the value property changes

    We can bind to any of these and have our update events fire when the event is triggered.

    ## The input event

    The most interesting of these is the input event. This fires whenever the value attribute changes. Let's save the value in the catName attribute of the component:

    ```html
    <input (input)="catName=$event.target.value" />
    ```

    ## Two way binding

    We might want to set the value of catName based on the component. We can do this in our template by binding the value property, like so:

    ```html
    <input [value]="catName" />
    ```

    Put it together and you have two way binding:


    ```html
    <input [value]="catName" (input)="catName=$event.target.value" />
    ```


    ## NgModel

    This is such a common thing to want to do that Angular gives us a shorthand.

    NgModel is a directive. We haven't seen any directives yet. A directive is just a component which doesn't have it's own template. Instead it modifies the template of the component or element it is applied to.

    The NgModel directive creates all of this data binding for us. It will bind a value and add an input listener.

    ```html
    <input [(ngModel)]='catName' />
    ```

    Notice the [()] brace combo. This shows that we are binding a property, to the return value of the event listener. It's a two way binding. We sometimes call this a banana-in-a-box.

    ## Validation

    The ngModel directive will add classes to our input. Say we do this:

    ```html
    <input required [(ngModel)]='catName' />
    ```

    We will find the following classes:

    * ng-valid
    * ng-invalid
    * ng-touched - happens after a blur
    * ng-untouched - happens before a blur
    * ng-pristine
    * ng-dirty

    We can write CSS to match this:

    ```css
    input.ng-invalid.ng-touched {
      background:pink;
    }
    ```

    If the item is invalid and has been touched, it will be pink.

    We can validate on type, eg: `type="number", also on pattern: pattern="/regex/".

    ## Outputing an error message

    If we want to output an error, we need to get access to the ngModel itself. This will hold validation data. We do this with a #tempalte variable, like so:

    ```html
    <input required [(ngModel)]="user.name" #name="ngModel" />
    <p *ngIf="!name.valid">Name is required</p>
    ```

    Validating the whole form

    We can optionally get validation messages for the whole form, like so:

    ```html
    <form #form="ngForm" (submit)="handleSubmit()">
      <input name="name" required [(ngModel)]="user.name" #name="ngModel" />
      <p *ngIf="!form.form.valid">Form has errors</p>
      <button *ngIf="form.form.valid">Submit</button>
    </form>

    ## Binding to submit

    We can bind to the (submit) event of a form to have something happen when we submit. This is better than binding to the (click) event of the button, because there are ways to submit a form other than clicking the button, for example the user might press enter on an input element.

    ```html
    <form (submit)="onSubmit()">
      <button>Go!</button>
    </form>
    ```

    If we have used ngInput to bind our inputs, we can then use this data to update a model.

  !=resources(exercise)

section.exercise
  :markdown
    ## Escape the Dungeon Exercise - Create a hero edit form

    Extend the Dungeon game with a hero edit component. When we click the edit button, the form should become visible. Remember to pass your hero into the component. Bind the form it to the hero model so that you can update it.

    ## Extension

    Make the edit component emit an event when the hero is updated. Create an `output` component that will pop up a message when the form is submitted.


//- section.exercise
//-   :markdown
//-     ## Exercise - Download Tagged Content from Flickr

//-     In your exercise folder you'll find a piece of code that can download a Flickr feed and display it in a web page. This is currently hardcoded, so it can only show sheep.

//-     Create an input element and bind it to the controller, such that when you type in it, the value is updated. Now make it so that when you click a button, it goes and downloads the feed for that tag.


section
  :markdown
    ## Further Reading

    * <a href="http://blog.thoughtram.io/angular/2015/08/11/angular-2-template-syntax-demystified-part-1.html#two-way-data-binding" target="_blank">Two Way Databinding</a>
