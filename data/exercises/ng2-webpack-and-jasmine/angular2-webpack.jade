section
  :markdown
    As we have seen, Webpack allows us to split out app across multiple files. We can also use it to manage dependencies. In this section we will use Webpack to modularise our Angular 2 code.

    ## package.json

    There are quite a lot of dependencies. We can get them from NPM. Create a package.json file and put the following in it:

    ```json
    {
      "name": "webpack_demo",
      "version": "1.0.0",
      "description": "",
      "main": "index.js",
      "scripts": {},
      "author": "",
      "license": "ISC",
      "devDependencies": {
        "@angular/common":  "2.0.0-rc.1",
        "@angular/compiler":  "2.0.0-rc.1",
        "@angular/core":  "2.0.0-rc.1",
        "@angular/http":  "2.0.0-rc.1",
        "@angular/platform-browser":  "2.0.0-rc.1",
        "@angular/platform-browser-dynamic":  "2.0.0-rc.1",
        "@angular/router":  "2.0.0-rc.1",
        "@angular/router-deprecated":  "2.0.0-rc.1",
        "@angular/upgrade":  "2.0.0-rc.1",
        "systemjs": "0.19.27",
        "core-js": "^2.4.0",
        "reflect-metadata": "^0.1.3",
        "rxjs": "5.0.0-beta.6",
        "zone.js": "^0.6.12"
      }
    }
    ```

    Now run `npm install` to get them all. Presto, we can now make use of the dependencies in our code.

    ## app.js

    Create a file called `source/app.js`. This will be our entry file. In this file we want to require all aour Angular dependencies, and bootstrap the app component.

    ```
    require('reflect-metadata');
    require('rxjs');
    require('zone.js');
    var platform = require('@angular/platform-browser-dynamic');
    var AppComponent = require('./app.component')

    document.addEventListener('DOMContentLoaded', function() {
      platform.bootstrap(AppComponent);
    });
    ```

    ## app.component.js

    Now we need to create the actual app component. Make a file called source/app.component.js and put the following into it:

    ```
    var core = require('@angular/core');

    module.exports = core.Component({
      selector: "app",
      template:
      `
        Hello Webpack!
      `
    })
    .Class({
      constructor: function() {}
    })
    ```

    This is out actual component.

    ## A note on naming conventions

    It has become traditional in Angular to name components after their domain, subdomains, and type, going from least specific to most specific. This helps keep related files together. For example:

    * app.component.js
    * cat.component.js
    * cat.service.js
    * cat.admin.component.js

    This makes it easy to

    ## Build with webpack.

    Run `webpack source/app.js build/app.js -dw` to begin building your app.

    ## index.html

    Now we just need some html:

    ```html
    <!DOCTYPE html>
    <html>
      <head>
        <title></title>
        <script src="build/app.js"></script>
      </head>
      <body>
        <app></app>
      </body>
    </html>
    ```

    Notice that the only script dependency is app.js. This is because we are requiring everything else into app.js.

section.exercise
  :markdown
    ## Exercise - Build some Angular

    We're going to use the Maths code from earlier to build a simple little calculator app with two components. We will build each component in a separate file, and require them.

    First, create an app component. Create a calculator component in a separate file, then `require` it into `app.js`.

    ```
    var CalculatorComponent = require('./calculator.component');
    ```

    Give the calculator component two input fields and bind them to attributes using `[(ngModel)]`. Now add three buttons for `add`, `subtract` and `power`.

    Require `maths` in your calculator component, then hook up the buttons to `maths.sum`, `maths.subtract`, and `maths.pow`

    ```
    var maths = require('./maths');

    When you click the buttons, your Angular code calls the relevant function in the maths object, passing the values from the input elements. The calculator then outputs the result.

    ## Extension

    For bonus points, have the calculator emit the result, and display it in the app module.
