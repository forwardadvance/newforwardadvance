//- TODO Bundle the shimps and polyfills into the imports.

section
  :markdown
    Now that we can compile TypeScript, it's time to build an app.

    First up we'll need some HTML. We can import everything explicitly, or we can use webpack to bundle all our dependencies.

    ```html
    <html>
      <head>
        <title>Hello World</title>
        <script src="lib/es6-shim.min.js"></script>
        <script src="lib/angular2-polyfills.js"></script>
        <script src="lib/Rx.umd.js"></script>
        <script src='build/app.js'></script>
      </head>
      <body>
        <app></app>
      </body>
    </html>
    ```

    ## app.ts

    Next we need our bootstrapper object that will start the whole thing. This will look something like this:

    ```
    import {bootstrap} from 'angular2/platform/browser'
    import {AppComponent} from './app.component'

    bootstrap(AppComponent);
    ```

    If you have your compiler running you will notice that it fails at this point because it can't find app.component. We'll make this now.

    ## app.component.ts

    App.component looks like this. Notice how, instead of ng.core.component, we use the @component decorator. Instead of .Class, we export an actual class.

    Apart from this, all else is the same. We can still do inputs and events. We still have directives.

    ```
    import {Component} from 'angular2/core';

    @Component({
        selector: 'app',
        template: `
          <h1>Hello World</h1>
        `
    })
    export class AppComponent { }
    ```

    ## tsconfig.json

    We also need a tsconfig.json file to tell TypeScript how to build. Put this in your root directory.

    ```json
    {
      "compilerOptions": {
        "target": "es5",
        "module": "commonjs",
        "moduleResolution": "node",
        "sourceMap": true,
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "removeComments": false,
        "noImplicitAny": true,
        "suppressImplicitAnyIndexErrors": true
      },
      "exclude": [
        "node_modules",
        "typings/main",
        "typings/main.d.ts"
      ]
    }
    ```


section.exercise
  :markdown
    ## Exercise - Implement the hello world above

    Try to get the simple hello world running in a browser. If you manage this. Try to implement the small app with the header, footer and cat we made yesterday.

    Be sure to create separate files for each item component. Use the naming scheme:

    ```
    cat.component.ts
    ```


section.exercise
  :markdown
    ## Harder Exercise - Cat Choice

    Use TypeScript to create a cat selector app. Create cat select components which have templates something like:

    ```
    <a (click)="tab=1">Cat 1</a>
    ```

    Store the currently selected cat in your app. There can only be one cat selected.

    Now create cat components, passing in the cat and whether or not it is selected.

    bind style.background to set the background colour of the selected cat.

    Build the above using TypeScript components.
