---
title: "JavaScript Closure"
section: "javascript"
course: "javascript-for-programmers"
exercise: "closure"
layout: "exercise"
---


%section
  :markdown
    # Core JavaScript Topics - Understanding Closure

    Closure can be a tricky concept to get one's head around. It works like this:

    1. Functions are objects and can be declared anywhere.
    2. If I declare a function within another function, the inner function has access to the local variables of the outer function.
    3. Normally when a function exits, all it's local variables are destroyed, but...
    4. If I hang on to the inner function in some way, the local variables of the outer function are still needed by the inner function.
    5. They are still in scope, so they are not garbage collected.

    This is closure in a nutshell. Here's an example:


  :ruby
    code = <<-CODE
    var outer = function() {
      var a = "A Local variable"
      var inner = function() {
        alert(a)
      }
      window.fnc = inner
    }
    outer();
    fnc();
    CODE
  =code(code)

  :markdown

    When we call outer, we define inner and assign it as an attribute of window (in other words, a global variable) inner persists after outer has exited, so the local variable a is still in scope, and still accessible to inner.

%section.exercise
  :markdown
    ## Exercise - Try it out

    1. Enter the above code and verify it works.

%section
  :markdown

    ## Self Executing Functions

    It seems a bit superfluous to have to call outer to create inner. Outer only exists here to define inner, there's no need for it once inner has been made.

    If only there was a way to avoid referencing outer. Thankfully there is.

     Here we have a self executing function. The function is in braces,  and there are braces at the end. We are declaring an unnamed function, then running it straight away, dispensing with the need for outer.

  :ruby
    code = <<-CODE
    (function() {
      var a = "A Local variable"
      var inner = function() {
        alert(a)
      }
      window.fnc = inner
    })()

    fnc();
    CODE
  =code(code)


%section.exercise
  :markdown

    ## Exercise - Guess the output

    For each of the following, try to work out what the output will be. Run the code to check your answer.

    ### 1.

  :ruby
    code = <<-CODE
    var a = 12;
    (function() {
      alert(a);
    })();
    CODE
  =code(code)

  :markdown

    ### 2.

  :ruby
    code = <<-CODE
    var a = 5;
    (function() {
      var a = 12;
      alert(a);
    })();
    CODE
  =code(code)

  :markdown

    ### 3.

  :ruby
    code = <<-CODE
    var a = 10;
    var x = (function() {
      var a = 12;
      return (function() {
        alert(a);
      });
    })();

    x();
    CODE
  =code(code)

  :markdown

    ### 4.

  :ruby
    code = <<-CODE
    var a = 10;
    var x = (function() {
      var y = function() {
        var a = 12;
      };
      return function() {
        alert(a);
      }
    })();

    x();
    CODE
  =code(code)

  :markdown


    ### 5.

  :ruby
    code = <<-CODE
    var a = 10;
    var x = (function() {
      (function() {
        a = 12; // <<< look carefully at this line.
      })();
      return (function() {
        alert(a);
      });
    })();

    x();
    CODE
  =code(code)

  :markdown

    ### 6.

  :ruby
    code = <<-CODE
    var a = 10;
    (function() {
      var a = 15;
      window.x = function() {
        alert(a);
      }
    })();

    x();
    CODE
  =code(code)

  :markdown

    ## Further Reading

    [Read my post on "What is a closure" on Stack Overflow](http://stackoverflow.com/a/7464475/687677)

