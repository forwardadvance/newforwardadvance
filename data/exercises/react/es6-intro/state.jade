:markdown
  Applications need to store information about their current state. For example, if a user is logged in, we need to remember who they are. If we type in a form, we need to save the values.

  There are three places we can store state:

  1. In the component itself.
  2. In the root component of the app.
  3. In a Flux Store, which is like a database for the application.

  Depending on what we want to achieve, we may use one or all of these techniques in our application.

  Stateful components are defined using a class. Until mid 2016, all components were defined this way, and could potentially have state. Here is an example of a component with state:

  <p data-height="400" data-theme-id="dark" data-slug-hash="NgKerR" data-default-tab="js,result" data-user="superluminary" data-embed-version="2" data-pen-title="React Stateful Components Demo" data-editable="true" class="codepen">See the Pen <a href="https://codepen.io/superluminary/pen/NgKerR/">React Stateful Components Demo</a> by Nicholas Johnson (<a href="https://codepen.io/superluminary">@superluminary</a>) on <a href="https://codepen.io">CodePen</a>.</p>
  <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

  There are several things to notice here:

  ### 1. We change state in setState

  the setState function lets us change the state for the component. React will pick up on this call, and will rerender the app. This isn't Angular, where you can just change values. There's no magic here.

  Sometimes React may batch multiple setState commands into one, so you can't guarantee when setState will be run.

  ### 2. Objects in state are ideally immutable

  We don't change objects in state, we create brand new objects, and copy in the values. The lets React see what has changed by comparing the old state object with the new one, and prevents wierd things happening where we render a value, then change it later in the rendering cycle. 
  
  We call this immutablility. Lots more on this later.

  ## Be wary of State Overuse

  State is a fairly old concept in React. It is more common now to store most of our application state in a central store which then sets itself as the state of the root component, and then propogates down to the children via *props*.

  We call this a Flux Architecture. More on this soon.

  ## Immutables

  