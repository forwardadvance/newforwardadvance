section
  :markdown
    Unit testing is a process where we test individual parts of an application individually to make sure they actually do what we think they ought to do. Writing unit tests is important for many reasons:

    1. It gives us confidence that we have done out jobs properly. We can go to bed happy in the knowledge of a job well done.
    2. It helps us when it comes time to refactor.
    3. It helps us upgrade libraries, so we're not stuck on an ancient version of Angular forever.
    4. It acts as documentation for other developers
    5. It helps us become better coders.

    ## Unit testing makes us into better coders

    This might sound strange, but it is true. Untestable code tends to look like this:

    * Long, complicated functions that do a lot of things
    * Deep, convoluted dependencies
    * Poorly thought through APIs
    * Unparameterised functions with no clear input and output

    This is also coincidentally what bad code looks like.

    Testable code on the other hand looks like:

    * Short, single purpose, well named functions that do one thing.
    * Flat, injected dependencies.
    * Well thought through, logical APIs
    * Parameterised functions that receive input, and do something.

    Unit testing forces us to use our code as we go. If we can't test a piece of code, it's a strong sign that we need to go home and have a rethink.

    ## Karma

    Karma is a unit testing framework favoured by the Angular core team. It has excellent integration with Angular, for example you can import Angular modules, and you can mock out AJAX. It contains code to automatically run tests whenever a file is saved.

    We'll be using Karma throughout the duration of this course.

    ## Jasmine

    Jasmine is an English-like syntax for writing unit tests. Karma supports several syntaxes, but most people use Jasmine style syntax. Jasmine looks like this:

    ```
    it( 'should add one and one', () => {
      expect( 1 + 1 ).toEqual( 2 )
    });
    ```

    In theory, Jasmine tests can be read and understood by a layperson. Jasmine tests should be simple, legible, standard. A new coder should be able to join a team and start reading and writing tests straight away.

    Don't go over-complicating your tests with anything surprising or you have defeated the point of testing. Sensible, well named helper functions are allowed.

section.exercise
  :markdown
    ## Exercise - Check that basic maths works

    Download the base calculator app from the Github repository. You will notice that the code has been split up into directories, like so:

    * lib - Angular itself (also possibly JQuery, D3, etc). Imported first, just like in our app.
    * js - Our code. Karma needs to create an instance of our app in order to test it.
    * specs - By convention, Karma tests live in the specs folder. All tests in here will be executed.

    ## Let's play with Jasmine

    We are not going to test anything useful here, we are just going to play with Jasmine. Create a file in the spec folder. Call it maths_tests.js.

    * Now write a simple test to demonstrate that 1 + 1 == 2.
    * Now test that 1 + 1 != 3

    You can view the Jasmine documentation here: <http://jasmine.github.io/2.1/introduction.html>

