# App View

When building Backbone apps, it's usually helpful to create an AppView object which is responsible for bringing other views into existence. We then only need to create a new AppView() to bootstrap our application.

In this realistic app we're going to use all the tools we have learned to build a real application.

## Exercise: Realistic Todo List (Cat List)

The todo list is the hello world of client side MVC. In this section, you're going to code your own todo list (or CatList if you would prefer).

### Unit tests

Write unit tests for your functions as you go along. Choose Jasmine or QUnit.

### Part one: adding cats

1. Create an AppView, Model, Collection, FormView, CatListView and CatView.
2. Have your appView bring your app into being. Instantiate your AppView.
3. Hook up your formView to a form template, that will allow you to create a new cat.
4. Bind the form submit event to a method that creates a new Cat and adds it to the collection.
5. Bind the collection 'all' event to the catListView render method, so when the collection changes, the view re-renders.
6. Write unit tests for the functions you have created.

### Part two: deleting cats

1. Add a little x link to the CatView template.
2. Create an event such that when you click the x, the Cat is removed from the collection.

### Part three: searching cats

Add an input field. When you type in it, call search on the collection and re-render with the results.

### Part four (optional): editing cats

1. Add an edit button to the CatView template.
2. When you click the cat, call cat.set('editable', true)
3. In the catView render method, check the status of editable, and draw a formTemplate if it is true.
4. Wire up the submit button on the form so that it modifies the cat.
