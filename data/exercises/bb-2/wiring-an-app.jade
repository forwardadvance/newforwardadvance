:markdown
  ```
  var app = app || {} ;


  $(function() {
    app.Cat = Backbone.Model.extend({});

    app.CatView = Backbone.View.extend({
      el: "#cat",
      initialize: function() {
        this.render();
        this.listenTo(app.cat, 'change:name', this.render);
      },
      render: function() {
        this.$el.html(this.model.get('name'));
      }
    });

    app.cat = new app.Cat({
      name: "Fluffy"
    });

    app.catView = new app.CatView({
      model: app.cat
    })

    // app.cat.on('change', app.catView.render);
  });
  ```

section.exercise
  :markdown
    # A simple app.

    We are going to create a simple, but fully functional app containing one model and two views:

    ## Model

    This is the model, Use the same model you've been working on up till now, or make a new one. Remember you will need to create an instance of the model to use it.

    ## ModelView

    This view outputs your model using a template. If your model is a Cat, it should be called CatView. Give it an instance of your model in it's model attribute.

    ## ModelFormView

    This view creates a form using a template. If your model is a cat, this will be the CatFormView. When the form is submitted, the model will be updated.

    ## Wire it together

    * Have your modelView listenTo the model 'all' event, and call render
    * Pass an events object to make your modelFormView call an updateModel method when the form is submitted. this will call .set on the model and pass a json object.

    Optional extra

    * Use the keyup event on the input elements in the form, to call updateModel, so the modelView updates as you type.

    ## Extension

    Create a metadataView which shows when the view was last updated. You can get the current time using Date()

    ## Reading

    Why Backbone is a good intro to why you might learn to love Backbone

    <http://backbonejs.org/#FAQ-why-backbone>

    Also read "There's more than one way to do it" for advice on structuring your code.

    <http://backbonejs.org/#FAQ-tim-toady>
